package com.project;

import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Scanner;

import com.project.entity.DataBaseConnectivity;
import com.project.entity.FileManagement;
import com.project.entity.Project;
import com.project.entity.Task;
import com.project.enums.ProjectStatus;
import com.project.enums.TaskPriority;
import com.project.enums.TaskStatus;
import com.project.exceptions.BusinessException;
import com.project.exceptions.DuplicateProjectException;
import com.project.exceptions.DuplicateTaskException;
import com.project.repository.ProjectRepository;
import com.project.repository.TaskRepository;
import com.project.services.ProjectService;
import com.project.services.ReminderService;
import com.project.services.TaskService;

public class ProjectManagementApp {
    private static final Scanner scanner = new Scanner(System.in);
    private static ProjectService projectService;
    private static TaskService taskService;
    private static ReminderService reminderService;
    private static boolean remindersActive = false;

    public static void main(String[] args) {
        try {
            initializeServices();
            runApplication();
        } catch (Exception e) {
            System.err.println("Erreur critique: " + e.getMessage());
            e.printStackTrace();
        } finally {
            cleanup();
        }
    }

    private static void initializeServices() throws SQLException {
        System.out.println("Initialisation des services...");
        DataBaseConnectivity db = new DataBaseConnectivity();
        db.connect();

        projectService = new ProjectService(new ProjectRepository(db));
        taskService = new TaskService(new TaskRepository(db));
        reminderService = new ReminderService(taskService.getAllTasks());
        System.out.println("‚úÖ Services initialis√©s avec succ√®s");
    }

    private static void runApplication() throws SQLException {
        boolean exit = false;
        while (!exit) {
            displayMainMenu();
            int choice = safeReadInt("Votre choix: ");

            switch (choice) {
                case 1 -> manageProjects();
                case 2 -> manageTasks();
                case 3 -> manageReminders();
                case 4 -> generateReports();
                case 0 -> exit = confirmExit();
                default -> System.out.println("‚ùå Option invalide!");
            }
        }
    }

    private static void cleanup() {
        if (remindersActive) {
            reminderService.stop();
        }
        scanner.close();
        System.out.println("üëã Application ferm√©e");
    }

    // ==================== MENUS PRINCIPAUX ====================
    private static void displayMainMenu() {
        System.out.println("\n=== GESTION DE PROJETS ===");
        System.out.println("1. üìã Gestion des projets");
        System.out.println("2. ‚úÖ Gestion des t√¢ches");
        System.out.println("3. ‚è∞ Gestion des rappels");
        System.out.println("4. üìä Rapports et statistiques");
        System.out.println("0. üö™ Quitter");
    }

    // ==================== GESTION PROJETS ====================
    private static void manageProjects() throws SQLException {
        boolean back = false;
        while (!back) {
            System.out.println("\n--- GESTION DES PROJETS ---");
            System.out.println("1. üÜï Cr√©er un projet");
            System.out.println("2. üìú Lister tous les projets");
            System.out.println("3. üîç Rechercher un projet");
            System.out.println("4. ‚úèÔ∏è Modifier un projet");
            System.out.println("5. üóëÔ∏è Supprimer un projet");
            System.out.println("6. üìå Voir les t√¢ches d'un projet");
            System.out.println("0. ‚Ü©Ô∏è Retour");

            int choice = safeReadInt("Choix: ");
            switch (choice) {
                case 1 -> createProject();
                case 2 -> listAllProjects(false);
                case 3 -> findProjectByName();
                case 4 -> updateProject();
                case 5 -> deleteProject();
                case 6 -> viewProjectTasks();
                case 0 -> back = true;
                default -> System.out.println("‚ùå Option invalide!");
            }
        }
    }

    private static void createProject() {
        System.out.print("Nom du projet: ");
        String name = scanner.nextLine();

        System.out.print("Description: ");
        String description = scanner.nextLine();

        try {
            Project project = projectService.createProject(name, description);
            System.out.println("‚úÖ Projet cr√©√©: " + project.getName());
        } catch (DuplicateProjectException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        } catch (SQLException e) {
            System.err.println("‚ùå Erreur base de donn√©es: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå Validation: " + e.getMessage());
        }
    }

    private static void listAllProjects(boolean brief) throws SQLException {
        List<Project> projects = projectService.getAllProjects();
        if (projects.isEmpty()) {
            System.out.println("‚ÑπÔ∏è Aucun projet trouv√©");
            return;
        }

        System.out.println("\nüìã Liste des projets:");
        for (Project p : projects) {
            if (brief) {
                System.out.printf("- %s (Statut: %s, Progression: %.1f%%)\n",
                        p.getName(), p.getStatus(), p.getProgression());
            } else {
                System.out.println(p.toString());
            }
        }
    }

    private static void findProjectByName() {
        System.out.print("Nom du projet: ");
        String name = scanner.nextLine();

        Project project = projectService.findByName(name);
        if (project != null) {
            displayProjectDetails(project);
        } else {
            System.out.println("‚ùå Projet non trouv√©");
        }
    }

    private static void displayProjectDetails(Project project) {
        System.out.println("\nüìã D√©tails du projet:");
        System.out.println("Nom: " + project.getName());
        System.out.println("Description: " + project.getDescription());
        System.out.println("Statut: " + project.getStatus());
        System.out.printf("Progression: %.1f%%\n", project.getProgression());
        System.out.println("Date d√©but: " + project.getFrom());
        System.out.println("Date fin: " + (project.getTo() != null ? project.getTo() : "Non d√©finie"));
    }

    private static void updateProject() throws SQLException {
        System.out.print("Nom du projet √† modifier: ");
        String name = scanner.nextLine();

        Project project = projectService.findByName(name);
        if (project == null) {
            System.out.println("‚ùå Projet non trouv√©");
            return;
        }

        System.out.print("Nouvelle description (laisser vide pour ne pas modifier): ");
        String newDesc = scanner.nextLine();
        
        System.out.print("Nouveau statut (TODO/IN_PROGRESS/DONE) (laisser vide pour ne pas modifier): ");
        String newStatus = scanner.nextLine();

        System.out.print("Nouvelle date de fin (AAAA-MM-JJ) (laisser vide pour ne pas modifier): ");
        String newEndDate = scanner.nextLine();

        if (!newDesc.isEmpty()) project.setDescription(newDesc);
        if (!newStatus.isEmpty()) project.setStatus(ProjectStatus.valueOf(newStatus));
        if (!newEndDate.isEmpty()) project.setTo(LocalDate.parse(newEndDate));

        boolean success = projectService.updateProject(project);
        System.out.println(success ? "‚úÖ Projet mis √† jour" : "‚ùå √âchec de la mise √† jour");
    }

    private static void deleteProject() throws SQLException {
        System.out.print("Nom du projet √† supprimer: ");
        String name = scanner.nextLine();

        Project project = projectService.findByName(name);
        if (project == null) {
            System.out.println("‚ùå Projet non trouv√©");
            return;
        }

        System.out.print("Confirmer la suppression (o/n)? ");
        if (scanner.nextLine().equalsIgnoreCase("o")) {
            boolean success = projectService.deleteProject(project);
            System.out.println(success ? "‚úÖ Projet supprim√©" : "‚ùå √âchec de la suppression");
        }
    }

    private static void viewProjectTasks() {
        System.out.print("Nom du projet: ");
        String name = scanner.nextLine();

        Project project = projectService.findByName(name);
        if (project == null) {
            System.out.println("‚ùå Projet non trouv√©");
            return;
        }

        try {
            List<Task> tasks = taskService.getAllTasks();
            if (tasks.isEmpty()) {
                System.out.println("‚ÑπÔ∏è Aucune t√¢che pour ce projet");
                return;
            }

            System.out.println("\n‚úÖ T√¢ches du projet " + name + ":");
            tasks.forEach(t -> System.out.printf("- %s (√âch√©ance: %s, Statut: %s)\n",
                    t.getName(), t.getDueDate(), t.getStatus()));
        } catch (BusinessException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    // ==================== GESTION T√ÇCHES ====================
    private static void manageTasks() {
        boolean back = false;
        while (!back) {
            System.out.println("\n--- GESTION DES T√ÇCHES ---");
            System.out.println("1. üÜï Cr√©er une t√¢che");
            System.out.println("2. üìú Lister toutes les t√¢ches");
            System.out.println("3. üîç Rechercher une t√¢che");
            System.out.println("4. ‚úèÔ∏è Modifier une t√¢che");
            System.out.println("5. üóëÔ∏è Supprimer une t√¢che");
            System.out.println("6. üè∑Ô∏è Filtrer par statut");
            System.out.println("0. ‚Ü©Ô∏è Retour");

            int choice = safeReadInt("Choix: ");
            switch (choice) {
                case 1 -> createTask();
                case 2 -> listAllTasks();
                case 3 -> findTaskByName();
                case 4 -> updateTask();
                case 5 -> deleteTask();
                case 6 -> filterTasksByStatus();
                case 0 -> back = true;
                default -> System.out.println("‚ùå Option invalide!");
            }
        }
    }

    private static void createTask() {
        try {
            System.out.print("Nom du projet associ√©: ");
            String projectName = scanner.nextLine();

            Project project = projectService.findByName(projectName);
            if (project == null) {
                System.out.println("‚ùå Projet non trouv√©");
                return;
            }

            System.out.print("Nom de la t√¢che: ");
            String name = scanner.nextLine();

            System.out.print("Description: ");
            String description = scanner.nextLine();

            LocalDate dueDate = readDate("Date d'√©ch√©ance (AAAA-MM-JJ): ");
            
            System.out.print("Priorit√© (LOW/MEDIUM/HIGH): ");
            TaskPriority priority = TaskPriority.valueOf(scanner.nextLine().toUpperCase());

            Task task = taskService.createTask(name, description, dueDate, TaskStatus.TODO, priority);
            taskService.addTaskToProject(task, projectName);
            System.out.println("‚úÖ T√¢che cr√©√©e avec succ√®s");
        } catch (DateTimeParseException e) {
            System.err.println("‚ùå Format de date invalide");
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå Valeur invalide: " + e.getMessage());
        } catch (BusinessException | SQLException | DuplicateTaskException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    private static void listAllTasks() {
        try {
            List<Task> tasks = taskService.getAllTasks();
            if (tasks.isEmpty()) {
                System.out.println("‚ÑπÔ∏è Aucune t√¢che trouv√©e");
                return;
            }

            System.out.println("\nüìã Liste des t√¢ches:");
            tasks.forEach(t -> System.out.printf("- %s (Projet: %s, √âch√©ance: %s, Statut: %s)\n",
                    t.getName(), getProjectForTask(t), t.getDueDate(), t.getStatus()));
        } catch (BusinessException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    private static String getProjectForTask(Task task) {
        // Impl√©mentation simplifi√©e - √† adapter selon votre mod√®le de donn√©es
        try {
            List<Project> projects = projectService.getAllProjects();
            for (Project p : projects) {
                if (p.getTasks().contains(task)) {
                    return p.getName();
                }
            }
        } catch (SQLException e) {
            return "Inconnu";
        }
        return "Sans projet";
    }

    private static void findTaskByName() {
        System.out.print("Nom de la t√¢che: ");
        String name = scanner.nextLine();

        try {
            Task task = taskService.findByName(name);
            if (task != null) {
                displayTaskDetails(task);
            } else {
                System.out.println("‚ùå T√¢che non trouv√©e");
            }
        } catch (BusinessException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    private static void displayTaskDetails(Task task) {
        System.out.println("\nüìã D√©tails de la t√¢che:");
        System.out.println("Nom: " + task.getName());
        System.out.println("Description: " + task.getDescription());
        System.out.println("Date √©ch√©ance: " + task.getDueDate());
        System.out.println("Statut: " + task.getStatus());
        System.out.println("Priorit√©: " + task.getPriority());
    }

    private static void updateTask() {
        System.out.print("Nom de la t√¢che √† modifier: ");
        String name = scanner.nextLine();

        try {
            Task task = taskService.findByName(name);
            if (task == null) {
                System.out.println("‚ùå T√¢che non trouv√©e");
                return;
            }

            System.out.print("Nouvelle description (laisser vide pour ne pas modifier): ");
            String newDesc = scanner.nextLine();
            
            System.out.print("Nouveau statut (TODO/IN_PROGRESS/DONE) (laisser vide pour ne pas modifier): ");
            String newStatus = scanner.nextLine();

            System.out.print("Nouvelle date d'√©ch√©ance (AAAA-MM-JJ) (laisser vide pour ne pas modifier): ");
            String newDueDate = scanner.nextLine();

            if (!newDesc.isEmpty()) task.setDescription(newDesc);
            if (!newStatus.isEmpty()) task.setStatus(TaskStatus.valueOf(newStatus));
            if (!newDueDate.isEmpty()) task.setDueDate(LocalDate.parse(newDueDate));

            boolean success = taskService.updateTask(task);
            System.out.println(success ? "‚úÖ T√¢che mise √† jour" : "‚ùå √âchec de la mise √† jour");
        } catch (BusinessException | DateTimeParseException | IllegalArgumentException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    private static void deleteTask() {
        System.out.print("Nom de la t√¢che √† supprimer: ");
        String name = scanner.nextLine();

        try {
            Task task = taskService.findByName(name);
            if (task == null) {
                System.out.println("‚ùå T√¢che non trouv√©e");
                return;
            }

            System.out.print("Confirmer la suppression (o/n)? ");
            if (scanner.nextLine().equalsIgnoreCase("o")) {
                boolean success = taskService.deleteTask(task);
                System.out.println(success ? "‚úÖ T√¢che supprim√©e" : "‚ùå √âchec de la suppression");
            }
        } catch (BusinessException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    private static void filterTasksByStatus() {
        System.out.print("Statut √† filtrer (TODO/IN_PROGRESS/DONE): ");
        String status = scanner.nextLine().toUpperCase();

        try {
            List<Task> tasks = taskService.getTasksByStatus(TaskStatus.valueOf(status));
            if (tasks.isEmpty()) {
                System.out.println("‚ÑπÔ∏è Aucune t√¢che avec ce statut");
                return;
            }

            System.out.println("\nüìã T√¢ches avec statut " + status + ":");
            tasks.forEach(t -> System.out.printf("- %s (Projet: %s, √âch√©ance: %s)\n",
                    t.getName(), getProjectForTask(t), t.getDueDate()));
        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå Statut invalide");
        } catch (BusinessException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    // ==================== GESTION RAPPELS ====================
    private static void manageReminders() {
        boolean back = false;
        while (!back) {
            System.out.println("\n--- GESTION DES RAPPELS ---");
            System.out.println("√âtat actuel: " + (remindersActive ? "üü¢ ACTIF" : "üî¥ INACTIF"));
            System.out.println("1. " + (remindersActive ? "D√©sactiver" : "Activer") + " les rappels");
            System.out.println("2. Voir les t√¢ches en retard");
            System.out.println("0. ‚Ü©Ô∏è Retour");

            int choice = safeReadInt("Choix: ");
            switch (choice) {
                case 1 -> toggleReminders();
                case 2 -> showOverdueTasks();
                case 0 -> back = true;
                default -> System.out.println("‚ùå Option invalide!");
            }
        }
    }

    private static void toggleReminders() {
        remindersActive = !remindersActive;
        if (remindersActive) {
            reminderService.start();
            System.out.println("üîî Rappels activ√©s - V√©rification toutes les minutes");
        } else {
            reminderService.stop();
            System.out.println("üîï Rappels d√©sactiv√©s");
        }
    }

    private static void showOverdueTasks() {
        List<Task> overdueTasks = taskService.getAllTasks().stream()
                .filter(t -> t.getDueDate().isBefore(LocalDate.now()))
                .filter(t -> t.getStatus() != TaskStatus.DONE)
                .toList();

        if (overdueTasks.isEmpty()) {
            System.out.println("‚úÖ Aucune t√¢che en retard");
            return;
        }

        System.out.println("\n‚ö†Ô∏è T√¢ches en retard:");
        overdueTasks.forEach(t -> System.out.printf("- %s (Projet: %s, √âch√©ance: %s)\n",
                t.getName(), getProjectForTask(t), t.getDueDate()));
    }

    // ==================== GENERATION RAPPORTS ====================
    private static void generateReports() throws SQLException {
        boolean back = false;
        while (!back) {
            System.out.println("\n--- RAPPORTS ---");
            System.out.println("1. üìà Progression globale");
            System.out.println("2. üìã D√©tails par projet");
            System.out.println("3. ‚úÖ T√¢ches compl√©t√©es");
            System.out.println("4. ‚è≥ T√¢ches en cours");
            System.out.println("5. üíæ Exporter les donn√©es");
            System.out.println("0. ‚Ü©Ô∏è Retour");

            int choice = safeReadInt("Choix: ");
            switch (choice) {
                case 1 -> generateGlobalReport();
                case 2 -> generateProjectReport();
                case 3 -> generateCompletedTasksReport();
                case 4 -> generateInProgressTasksReport();
                case 5 -> exportData();
                case 0 -> back = true;
                default -> System.out.println("‚ùå Option invalide!");
            }
        }
    }

    private static void generateGlobalReport() throws SQLException {
        List<Project> projects = projectService.getAllProjects();
        long totalProjects = projects.size();
        long completedProjects = projects.stream()
                .filter(p -> p.getStatus() == ProjectStatus.DONE)
                .count();
        
        List<Task> tasks = taskService.getAllTasks();
        long totalTasks = tasks.size();
        long completedTasks = tasks.stream()
                .filter(t -> t.getStatus() == TaskStatus.DONE)
                .count();

        System.out.println("\nüìä RAPPORT GLOBAL");
        System.out.println("Projets: " + completedProjects + "/" + totalProjects + " compl√©t√©s");
        System.out.println("T√¢ches: " + completedTasks + "/" + totalTasks + " compl√©t√©es");
        System.out.printf("Progression moyenne: %.1f%%\n",
                projects.stream().mapToDouble(Project::getProgression).average().orElse(0));
    }

    private static void generateProjectReport() throws SQLException {
        listAllProjects(true);
        System.out.print("\nNom du projet pour le d√©tail (laisser vide pour annuler): ");
        String name = scanner.nextLine();

        if (name.isEmpty()) return;

        Project project = projectService.findByName(name);
        if (project == null) {
            System.out.println("‚ùå Projet non trouv√©");
            return;
        }

        System.out.println("\nüìã RAPPORT PROJET: " + name);
        System.out.println("Statut: " + project.getStatus());
        System.out.printf("Progression: %.1f%%\n", project.getProgression());
        System.out.println("Date d√©but: " + project.getFrom());
        System.out.println("Date fin: " + (project.getTo() != null ? project.getTo() : "Non d√©finie"));

        try {
            List<Task> tasks = taskService.getAllTasks();
            System.out.println("\nT√¢ches associ√©es (" + tasks.size() + "):");
            
            long doneCount = tasks.stream().filter(t -> t.getStatus() == TaskStatus.DONE).count();
            System.out.printf("‚úÖ Compl√©t√©es: %d (%.1f%%)\n", doneCount, 
                    tasks.isEmpty() ? 0 : (double) doneCount / tasks.size() * 100);
            
            System.out.println("\nD√©tail par statut:");
            for (TaskStatus status : TaskStatus.values()) {
                long count = tasks.stream().filter(t -> t.getStatus() == status).count();
                System.out.printf("- %s: %d\n", status, count);
            }
        } catch (BusinessException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    private static void generateCompletedTasksReport() {
        try {
            List<Task> tasks = taskService.getTasksByStatus(TaskStatus.DONE);
            if (tasks.isEmpty()) {
                System.out.println("‚ÑπÔ∏è Aucune t√¢che compl√©t√©e");
                return;
            }

            System.out.println("\n‚úÖ T√ÇCHES COMPL√âT√âES (" + tasks.size() + ")");
            tasks.forEach(t -> System.out.printf("- %s (Projet: %s, Compl√©t√©e le: %s)\n",
                    t.getName(), getProjectForTask(t), LocalDate.now())); // Date fictive
        } catch (BusinessException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    private static void generateInProgressTasksReport() {
        try {
            List<Task> tasks = taskService.getTasksByStatus(TaskStatus.IN_PROGRESS);
            if (tasks.isEmpty()) {
                System.out.println("‚ÑπÔ∏è Aucune t√¢che en cours");
                return;
            }

            System.out.println("\n‚è≥ T√ÇCHES EN COURS (" + tasks.size() + ")");
            tasks.forEach(t -> {
                String dueInfo = t.getDueDate().isBefore(LocalDate.now()) 
                        ? "‚ö†Ô∏è EN RETARD (depuis " + LocalDate.now().until(t.getDueDate()).getDays() + " jours)"
                        : "√âch√©ance: " + t.getDueDate();
                System.out.printf("- %s (Projet: %s, %s)\n",
                        t.getName(), getProjectForTask(t), dueInfo);
            });
        } catch (BusinessException e) {
            System.err.println("‚ùå Erreur: " + e.getMessage());
        }
    }

    private static void exportData() {
        try {
            List<Project> projects = projectService.getAllProjects();
            FileManagement fileManager = new FileManagement(projects);
            fileManager.writeToFile();
            System.out.println("‚úÖ Donn√©es export√©es avec succ√®s");
        } catch (SQLException e) {
            System.err.println("‚ùå Erreur lors de l'export: " + e.getMessage());
        }
    }

    // ==================== UTILITAIRES ====================
    private static int safeReadInt(String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                int input = Integer.parseInt(scanner.nextLine());
                return input;
            } catch (NumberFormatException e) {
                System.out.println("‚ùå Veuillez entrer un nombre valide");
            }
        }
    }

    private static LocalDate readDate(String prompt) {
        while (true) {
            System.out.print(prompt);
            try {
                return LocalDate.parse(scanner.nextLine());
            } catch (DateTimeParseException e) {
                System.out.println("‚ùå Format de date invalide (AAAA-MM-JJ requis)");
            }
        }
    }

    private static boolean confirmExit() {
        System.out.print("Confirmer la sortie (o/n)? ");
        return scanner.nextLine().equalsIgnoreCase("o");
    }
}